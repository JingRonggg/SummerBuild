name: "Stage 2: Integration"

on:
  push:
    branches: ['*']
  # pull_request:
  #   branches: [main]
  workflow_dispatch:
  # Called by Stage 1 CI workflow completion
  workflow_call:
    inputs:
      sha:
        description: 'Commit SHA from Stage 1'
        required: true
        type: string
      ref:
        description: 'Git ref from Stage 1'
        required: true
        type: string
      stage1_run_id:
        description: 'Stage 1 run ID'
        required: true
        type: string
    secrets:
      POSTGRES_DB:
          required: true
      POSTGRES_USER:
          required: true
      POSTGRES_PASSWORD:
         required: true

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  JAVA_VERSION: '21'
  DB_NAME: "testdb_${{ github.run_id }}"  # Unique DB per run to counter @Commit
  DB_USER: ${{ secrets.POSTGRES_USER }}
  DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  CI: true  # Set CI environment variable globally

jobs:
  integration-setup: 
    name: "Integration Infrastructure Setup"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: Backend

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb_${{ github.run_id }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.POSTGRES_USER }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    # PostgreSQL service container for integration testing
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        ports:
          - 5432:5432
        # Fixed health check to use correct user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    outputs:
      # Informs that infrastructure is ready if verify-infrastructure succeeds
      infrastructure-ready: ${{ steps.verify-infrastructure.outcome }}
      db-host: localhost
      db-port: 5432

    steps:
      - name: "Set up Docker"
        uses: docker/setup-buildx-action@v3

      - name: "Getting Code"
        uses: actions/checkout@v4
        with:
          # References the correct commit that passes Stage 1
          ref: ${{ github.event.client_payload.sha || github.sha }}

      - name: "Debug Repository Structure"
        run: |
          echo "Current working directory:"
          pwd
          echo ""
          echo "Contents of current directory:"
          ls -la
          echo ""
          echo "Looking for Backend folder specifically:"
          if [ -d "Backend" ]; then
            echo "✓ Backend folder exists"
            echo "Contents of Backend folder:"
            ls -la Backend/
          else
            echo "✗ Backend folder NOT found"
            echo "Searching for similar folders:"
            find . -maxdepth 2 -type d -iname "*backend*" 2>/dev/null || echo "No backend-related folders found"
          fi
        working-directory: .

      - name: "Debug Environment Variables"
        run: |
          echo "DB_NAME: '${{ env.DB_NAME }}'"
          echo "DB_USER: '${{ env.DB_USER }}'"
          echo "DB_PASSWORD length: ${#DB_PASSWORD}"
          echo "CI environment: $CI"
          echo "SPRING_DATASOURCE_URL: $SPRING_DATASOURCE_URL"
          echo "SPRING_DATASOURCE_USERNAME: $SPRING_DATASOURCE_USERNAME"
          echo "SPRING_DATASOURCE_PASSWORD length: ${#SPRING_DATASOURCE_PASSWORD}"
          echo "All environment variables that start with POSTGRES:"
          env | grep POSTGRES || echo "No POSTGRES variables found"
        env:
          DB_NAME: ${{ env.DB_NAME }}
          DB_USER: ${{ env.DB_USER }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
          CI: ${{ env.CI }}
          SPRING_DATASOURCE_URL: ${{ env.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ env.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.SPRING_DATASOURCE_PASSWORD }}

      - name: "Stage 1 Information"
        if: |
          github.event_name == 'repository_dispatch' || 
          github.event_name == 'workflow_call' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.sha)
        run: |
          echo "==============================="
          echo " STAGE 2: INTEGRATION TESTING  "
          echo "==============================="
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "Triggered by Stage 1 completion (repository_dispatch)"
            echo "Source SHA: ${{ github.event.client_payload.sha }}"
            echo "Source Ref: ${{ github.event.client_payload.ref }}"
            echo "Stage 1 Run ID: ${{ github.event.client_payload.stage1_run_id }}"
          elif [ "${{ github.event_name }}" == "workflow_call" ]; then
            echo "Triggered by Stage 1 completion (workflow_call)"
            echo "Source SHA: ${{ inputs.sha }}"
            echo "Source Ref: ${{ inputs.ref }}"
            echo "Stage 1 Run ID: ${{ inputs.stage1_run_id }}"
          else
            echo "Triggered manually or by push"
            echo "Source SHA: ${{ github.sha }}"
            echo "Source Ref: ${{ github.ref }}"
          fi
          echo "============================="

      - name: "Set up JDK 21"
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: "Install PostgreSQL client"
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: "Wait for PostgreSQL to be ready"
        run: |
          echo "Waiting for PostgreSQL service to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U $DB_USER; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... (attempt $i/30)"
            sleep 2
          done
        env:
          PGPASSWORD: ${{ env.DB_PASSWORD }}

      - name: "Verify database connection"
        run: |
          echo "Testing database connection..."
          psql -h localhost -p 5432 -U $DB_USER -d $DB_NAME -c "SELECT version();"
          echo "Database connected!"
        env:
          PGPASSWORD: ${{ env.DB_PASSWORD }}

      - name: "Verify integration environment"
        run: |
          echo "Verifying integration environment setup..."
          java -version
          mvn -version
          echo "Integration environment ready!"
          echo "Note: Code compilation already verified in Stage 1"

      - name: "Check test configuration files"
        run: |
          echo "Checking for test configuration files..."
          if [ -f "src/main/resources/application-test.properties" ]; then
            echo "✓ application-test.properties found"
          elif [ -f "src/test/resources/application-test.properties" ]; then
            echo "✓ application-test.properties found in test resources"
          else
            echo "⚠ application-test.properties not found - will be created"
          fi

      - name: "Test database connectivity from application context"
        id: verify-infrastructure
        run: |
          echo "Testing database connectivity with application configuration..."
          
          # Create a temporary test to verify DB connectivity
          cat > src/test/java/TestDatabaseConnectivity.java << 'EOF'
          import java.sql.Connection;
          import java.sql.DriverManager;
          import java.sql.ResultSet;
          import java.sql.Statement;
          
          public class TestDatabaseConnectivity {
              public static void main(String[] args) {
                  try {
                      String url = "jdbc:postgresql://localhost:5432/" + System.getenv("DB_NAME");
                      String user = System.getenv("DB_USER");
                      String password = System.getenv("DB_PASSWORD");
                      
                      Connection conn = DriverManager.getConnection(url, user, password);
                      Statement stmt = conn.createStatement();
                      ResultSet rs = stmt.executeQuery("SELECT 1 as test");
                      
                      if (rs.next()) {
                          System.out.println("Database connectivity test - PASSED");
                      }
                      
                      rs.close();
                      stmt.close();
                      conn.close();
                  } catch (Exception e) {
                      System.out.println("Database connectivity test - FAILED: " + e.getMessage());
                      System.exit(1);
                  }
              }
          }
          EOF
          
          # Compile and run the connectivity test
          javac -cp "$(mvn dependency:build-classpath -q -Dmdep.outputFile=/dev/stdout):." src/test/java/TestDatabaseConnectivity.java
          java -cp "$(mvn dependency:build-classpath -q -Dmdep.outputFile=/dev/stdout):src/test/java" TestDatabaseConnectivity
          
          echo "Application-level database connected!"
        env:
          DB_NAME: ${{ env.DB_NAME }}
          DB_USER: ${{ env.DB_USER }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}

      - name: "Infrastructure readiness check"
        run: |
          echo "Performing final infrastructure readiness check..."
          
          # Check PostgreSQL service health
          pg_isready -h localhost -p 5432 -U $DB_USER
          
          # Check disk space
          df -h
          
          # Check memory
          free -h
          
          # Check if Maven dependencies are cached
          if [ -d "$HOME/.m2/repository" ]; then
            echo "Maven cache is available"
          else
            echo "Maven cache not found - first run may be slower"
          fi
          
          echo "Infrastructure readiness check completed!"
        env:
          PGPASSWORD: ${{ env.DB_PASSWORD }}

      - name: "Infrastructure Setup Summary"
        run: |
          echo "=============================================="
          echo "        INFRASTRUCTURE SETUP COMPLETE         "
          echo "=============================================="
          echo ""
          echo "PostgreSQL 15 Service: Running on port 5432"
          echo "Database Connection: Verified ($DB_NAME)"
          echo "Java Environment: JDK 21"
          echo "Maven Setup: Dependencies cached"
          echo "Application Compilation: Successful"
          echo "Spring Boot Context: Ready for test profile (PostgreSQL for CI, H2 for local)"
          echo "Infrastructure Health: All systems operational"
          echo ""
          echo "Infrastructure Details:"
          echo "  - Database Host: localhost"
          echo "  - Database Port: 5432"
          echo "  - Database Name: $DB_NAME"
          echo "  - Database User: $DB_USER"
          echo "  - Spring Profile: test,ci to be used (PostgreSQL for true integration testing)"
          echo ""
          echo "=============================================="

      - name: "Create CI-specific test configuration"
        run: |
          echo "Creating CI-specific test configuration for PostgreSQL..."
          
          TEST_CONFIG_DIR="src/test/resources"
          CI_CONFIG_FILE="$TEST_CONFIG_DIR/application-ci.properties"
          FLYWAY_TEST_CONFIG="$TEST_CONFIG_DIR/application-flyway-test.properties"
          
          # Create directory if it doesn't exist
          mkdir -p $TEST_CONFIG_DIR
          
          # Create CI-specific configuration that uses PostgreSQL
          cat > $CI_CONFIG_FILE << EOF
          # CI-specific Test Database Configuration (PostgreSQL)
          spring.datasource.url=jdbc:postgresql://localhost:5432/$DB_NAME
          spring.datasource.username=$DB_USER
          spring.datasource.password=$DB_PASSWORD
          spring.datasource.driver-class-name=org.postgresql.Driver
          
          # Hibernate Configuration for PostgreSQL
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
          spring.jpa.show-sql=true
          spring.jpa.properties.hibernate.format_sql=true
          
          # Server Configuration for CI
          server.port=0
          
          # Test Configuration
          logging.level.org.springframework.web=DEBUG
          logging.level.com.example.SummerBuild=DEBUG
          logging.level.org.springframework.security=DEBUG
          logging.level.org.springframework.boot.web.embedded.tomcat=INFO
          
          # Bean override configuration
          spring.main.allow-bean-definition-overriding=true
          EOF

          # Create Flyway test configuration
          cat > $FLYWAY_TEST_CONFIG << EOF
          # Flyway Test Configuration
          spring.flyway.enabled=true
          spring.flyway.locations=classpath:db/migration
          spring.flyway.clean-disabled=false
          spring.flyway.baseline-on-migrate=true
          spring.flyway.validate-on-migrate=true
          spring.flyway.schemas=public
          spring.flyway.default-schema=public
          EOF
          
          echo "CI-specific test configuration created:"
          cat $CI_CONFIG_FILE
          echo ""
          echo "Flyway test configuration created:"
          cat $FLYWAY_TEST_CONFIG

  integration-tests:
      name: "Integration Tests"
      runs-on: ubuntu-latest
      needs: integration-setup
      if: needs.integration-setup.outputs.infrastructure-ready == 'success'

      defaults:
        run:
          working-directory: Backend

      # PostgreSQL service container for integration testing
      services:
        postgres:
          image: postgres:15
          env:
            POSTGRES_DB: ${{ env.DB_NAME }}
            POSTGRES_USER: ${{ env.DB_USER }}
            POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          ports:
            - 5432:5432
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

      steps:
        - name: "Getting Code"
          uses: actions/checkout@v4
          with:
            ref: ${{ github.event.client_payload.sha || github.sha }}

        - name: "Set up JDK 21"
          uses: actions/setup-java@v4
          with:
            java-version: ${{ env.JAVA_VERSION }}
            distribution: 'temurin'
            cache: maven

        - name: "Create CI-specific test configuration"
          run: |
            echo "Creating CI-specific test configuration for PostgreSQL..."
            
            TEST_CONFIG_DIR="src/test/resources"
            CI_CONFIG_FILE="$TEST_CONFIG_DIR/application-ci.properties"
            FLYWAY_TEST_CONFIG="$TEST_CONFIG_DIR/application-flyway-test.properties"
            
            # Create directory if it doesn't exist
            mkdir -p $TEST_CONFIG_DIR
            
            # Create CI-specific configuration that uses PostgreSQL
            cat > $CI_CONFIG_FILE << EOF
            # CI-specific Test Database Configuration (PostgreSQL)
            spring.datasource.url=jdbc:postgresql://localhost:5432/$DB_NAME
            spring.datasource.username=$DB_USER
            spring.datasource.password=$DB_PASSWORD
            spring.datasource.driver-class-name=org.postgresql.Driver
            
            # Hibernate Configuration for PostgreSQL
            spring.jpa.hibernate.ddl-auto=create-drop
            spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
            spring.jpa.show-sql=true
            spring.jpa.properties.hibernate.format_sql=true
            
            # Server Configuration for CI
            server.port=0
            
            # Test Configuration
            logging.level.org.springframework.web=DEBUG
            logging.level.com.example.SummerBuild=DEBUG
            logging.level.org.springframework.security=DEBUG
            logging.level.org.springframework.boot.web.embedded.tomcat=INFO
            
            # Bean override configuration
            spring.main.allow-bean-definition-overriding=true
            EOF

            # Create Flyway test configuration
            cat > $FLYWAY_TEST_CONFIG << EOF
            # Flyway Test Configuration
            spring.flyway.enabled=true
            spring.flyway.locations=classpath:db/migration
            spring.flyway.clean-disabled=false
            spring.flyway.baseline-on-migrate=true
            spring.flyway.validate-on-migrate=true
            spring.flyway.schemas=public
            spring.flyway.default-schema=public
            EOF
            
            echo "CI-specific test configuration created:"
            cat $CI_CONFIG_FILE
            echo ""
            echo "Flyway test configuration created:"
            cat $FLYWAY_TEST_CONFIG

        - name: "Wait for PostgreSQL to be ready"
          run: |
            echo "Waiting for PostgreSQL service to be ready..."
            for i in {1..30}; do
              if pg_isready -h localhost -p 5432 -U $DB_USER; then
                echo "PostgreSQL is ready!"
                break
              fi
              echo "Waiting for PostgreSQL... (attempt $i/30)"
              sleep 2
            done
          env:
            PGPASSWORD: ${{ env.DB_PASSWORD }}

        - name: "Debug test environment"
          run: |
            echo "=== DEBUGGING TEST ENVIRONMENT ==="
            echo "Working directory: $(pwd)"
            echo "Java version: $(java -version 2>&1)"
            echo ""
            echo "Test configuration files:"
            find src -name "application*.properties" -o -name "application*.yml" 2>/dev/null || echo "No config files found"
            echo ""
            echo "Database connectivity test:"
            pg_isready -h localhost -p 5432 -U $DB_USER && echo "DB ready" || echo "DB not ready"
            echo ""
            echo "Available ports:"
            netstat -tuln | grep :8080 || echo "Port 8080 available"
            echo "=================================="
          env:
            PGPASSWORD: ${{ env.DB_PASSWORD }}

        - name: "Run Integration Tests"
          run: |
            echo "=============================================="
            echo "         RUNNING INTEGRATION TESTS            "
            echo "=============================================="
            echo ""
            echo "Database: PostgreSQL (localhost:5432) - Real integration testing"
            echo "Spring Profiles: test,ci,flyway-test"
            echo "CI Environment: $CI"
            echo "Database URL: jdbc:postgresql://localhost:5432/$DB_NAME"
            echo ""
            
            mvn test \
              -Dspring.profiles.active=test,ci,flyway-test \
              -Dspring.datasource.url=jdbc:postgresql://localhost:5432/$DB_NAME \
              -Dspring.datasource.username=$DB_USER \
              -Dspring.datasource.password=$DB_PASSWORD \
              -Dtest="**/*IntegrationTest" \
              -B
            
            echo ""
            echo "Integration tests completed successfully!"
            echo "=============================================="
          env:
            DB_NAME: ${{ env.DB_NAME }}
            DB_USER: ${{ env.DB_USER }}
            DB_PASSWORD: ${{ env.DB_PASSWORD }}
            CI: ${{ env.CI }}

        - name: "Debug Test Reports Location"
          if: always()
          run: |
            echo "Looking for test reports..."
            find . -name "*.xml" -path "*/surefire-reports/*" 2>/dev/null || echo "No surefire XML reports found"
            find . -name "surefire-reports" -type d 2>/dev/null || echo "No surefire-reports directory found"
            echo "Contents of target directory:"
            ls -la target/ 2>/dev/null || echo "No target directory found"
            if [ -d "target/surefire-reports" ]; then
              echo "Contents of target/surefire-reports:"
              ls -la target/surefire-reports/
            fi

        - name: "Integration Test Results Summary"
          if: always()  # Run even if tests fail
          run: |
            echo "=============================================="
            echo "       INTEGRATION TEST RESULTS SUMMARY       "
            echo "=============================================="
            echo ""
            
            # Check if surefire-reports directory exists
            if [ -d "target/surefire-reports" ]; then
              echo "Test reports found in target/surefire-reports/:"
              ls -la target/surefire-reports/
              
              # Show test summary for all XML files
              echo ""
              echo "Test Results Summary:"
              for xml_file in target/surefire-reports/TEST-*.xml; do
                if [ -f "$xml_file" ]; then
                  echo "----------------------------------------------"
                  echo "Test Suite: $(basename "$xml_file")"
                  echo "----------------------------------------------"
                  grep -h "tests=" "$xml_file" | head -1
                  grep -h "failures=" "$xml_file" | head -1
                  grep -h "errors=" "$xml_file" | head -1
                  grep -h "skipped=" "$xml_file" | head -1
                  echo ""
                fi
              done
            else
              echo "No test reports directory found at target/surefire-reports/"
            fi
            echo ""
            echo "=============================================="

        - name: "Upload Test Reports"
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: integration-test-reports
            path: Backend/target/surefire-reports/
            retention-days: 30